# Workflow to build and deploy OpenWrt packages for the PeDitXOS repository.
# This version is designed for a two-account setup:
# 1. BUILD runs on the Build Bot account (e.g., peditbackup) to avoid queueing.
# 2. DEPLOY securely pushes the final artifacts to the main account's repository (e.g., peditx).

name: Build and Deploy PeDitXOS OpenWrt Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at 00:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        openwrt_version:
          - 'openwrt-24.10'
          - 'master'
          - 'openwrt-23.05'
          - 'openwrt-22.03'
        
        target_subtarget:
          - { target: 'ath79', subtarget: 'generic' }
          - { target: 'bcm27xx', subtarget: 'bcm2711' }
          - { target: 'ipq40xx', subtarget: 'generic' }
          - { target: 'ipq806x', subtarget: 'generic' }
          - { target: 'ipq807x', subtarget: 'generic' }
          - { target: 'lantiq', subtarget: 'xrx200' }
          - { target: 'mediatek', subtarget: 'filogic' }
          - { target: 'mvebu', subtarget: 'cortexa9' }
          - { target: 'ramips', subtarget: 'mt7621' }
          - { target: 'rockchip', subtarget: 'armv8' }
          - { target: 'sunxi', subtarget: 'cortexa7' }
          - { target: 'x86', subtarget: '64' }
          - { target: 'qualcommax', subtarget: 'ipq5018' }
          - { target: 'qualcommax', subtarget: 'ipq6018' }
          - { target: 'qualcommax', subtarget: 'ipq8074' }
          - { target: 'realtek', subtarget: 'generic' }
          - { target: 'mediatek', subtarget: 'mt7622' }

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion libncurses5-dev gawk zlib1g-dev python3-dev python3-setuptools unzip wget libtool python3-pip
          pip3 install pyelftools

      - name: Clone OpenWrt source code
        run: git clone --depth 1 --branch ${{ matrix.openwrt_version }} https://github.com/openwrt/openwrt.git openwrt

      - name: Clone custom single packages directly
        run: |
          # These packages have a non-standard feed structure and are cloned directly into the package directory.
          # This is the most reliable method for single-package repositories.
          git clone --depth 1 https://github.com/peditx/luci-app-themeswitch.git openwrt/package/luci-app-themeswitch
          git clone --depth 1 https://github.com/peditx/luci-theme-peditx.git openwrt/package/luci-theme-peditx
          git clone --depth 1 https://github.com/peditx/luci-theme-carbonpx.git openwrt/package/luci-theme-carbonpx

      - name: Add custom feeds and generate config
        run: |
          cd openwrt
          
          # Add only the compatible feeds (Passwall feeds work correctly this way)
          echo 'src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages' >> feeds.conf.default
          echo 'src-git passwall_peditx https://github.com/peditx/openwrt-passwall' >> feeds.conf.default
          echo 'src-git passwall2_peditx https://github.com/peditx/openwrt-passwall2' >> feeds.conf.default
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          cat > .config << EOF
          CONFIG_TARGET_${{ matrix.target_subtarget.target }}=y
          CONFIG_TARGET_${{ matrix.target_subtarget.target }}_${{ matrix.target_subtarget.subtarget }}=y
          EOF
          
          make defconfig
          
          cat >> .config << EOF
          CONFIG_DEVEL=y
          CONFIG_SIGNED_PACKAGES=y
          CONFIG_PACKAGE_luci-app-themeswitch=y
          CONFIG_PACKAGE_luci-theme-peditx=y
          CONFIG_PACKAGE_luci-theme-carbonpx=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-app-passwall2=y
          EOF

      - name: Cache OpenWrt Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-${{ matrix.openwrt_version }}-dl-${{ hashFiles('openwrt/feeds.conf.default') }}

      - name: Decode usign private key
        run: |
          echo "${{ secrets.USIGN_PRIVATE_KEY }}" | base64 -d > openwrt/signing_key.pem
          echo "CONFIG_SIGNATURE_KEY=\"signing_key.pem\"" >> openwrt/.config

      - name: Download package sources
        run: |
          cd openwrt
          make download -j$(nproc)

      - name: Cache Host Tools
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir/host
          key: ${{ runner.os }}-${{ matrix.openwrt_version }}-host-${{ hashFiles('openwrt/.config') }}

      - name: Build host tools (usign)
        run: |
          cd openwrt
          make tools/install -j$(nproc) V=s

      - name: Build packages
        run: |
          cd openwrt
          make package/index V=s

      - name: Organize packages for artifact upload
        run: |
          mkdir -p dist/${{ matrix.openwrt_version }}/${{ matrix.target_subtarget.target }}/${{ matrix.target_subtarget.subtarget }}/packages
          find openwrt/bin/packages -type f -name "*.ipk" -exec cp {} dist/${{ matrix.openwrt_version }}/${{ matrix.target_subtarget.target }}/${{ matrix.target_subtarget.subtarget }}/packages/ \;
          find openwrt/bin/targets -name "Packages*" -exec cp {} dist/${{ matrix.openwrt_version }}/${{ matrix.target_subtarget.target }}/${{ matrix.target_subtarget.subtarget }}/ \;
          cp openwrt/key-build.pub dist/${{ matrix.openwrt_version }}/
          
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist
          
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./dist
      
      - name: Create a root index.html file
        run: |
          cd dist
          echo '<!DOCTYPE html><html><head><title>PeDitXOS Repository</title><style>body{font-family: sans-serif; padding: 2em;}</style></head><body>' > index.html
          echo '<h1>PeDitXOS Repository</h1>' >> index.html
          echo '<h2>Available OpenWrt Versions:</h2><ul>' >> index.html
          
          for dir in $(find . -maxdepth 1 -type d -not -name '.*' -not -name '.' | sort); do
            version_name=$(basename "$dir")
            echo "<li><a href=\"$version_name/\">$version_name</a></li>" >> index.html
          done
          
          echo '</ul>' >> index.html
          
          find . -name 'key-build.pub' -print -exec cp {} ./key-build.pub \; -quit
          
          echo '<h3>Public Signing Key: <a href="key-build.pub">key-build.pub</a></h3>' >> index.html
          echo '</body></html>'
          
      - name: Push updates to main repository
        uses: peaceiris/actions-gh-pages@v4
        with:
          # This is the private SSH key (Deploy Key) for secure access.
          deploy_key: ${{ secrets.DEPLOY_KEY }}
          # IMPORTANT: This pushes the results to your MAIN account's repository (Account 1).
          # The build itself runs on Account 2 (peditbackup).
          external_repository: peditx/PeDitXOS-Repository
          publish_dir: ./dist
          publish_branch: repo
          force_orphan: true
          cname: downloads.peditxos.ir

      - name: Final Check
        run: echo "Deployment to 'peditx/PeDitXOS-Repository' branch 'repo' complete."

