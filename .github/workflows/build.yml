# ======================================================================================
# COMPLETE OpenWrt Package Repository Builder - Robust Version
#
# This workflow is designed to be resilient and build a full package set.
# Key features:
#   - Appends to the default feeds config instead of overwriting, ensuring all base feeds are present.
#   - Uses IGNORE_ERRORS=m to continue building even if a single package fails to compile.
#   - Maximizes runner disk space to prevent build failures due to storage limits.
# ======================================================================================

name: Build and Deploy PeDitXOS OpenWrt Packages (Full Source)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at 00:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        openwrt_version:
          - 'openwrt-24.10'
          - 'master'
          - 'openwrt-23.05'
          - 'openwrt-22.03'
        
        target_subtarget:
          - 'ath79/generic'
          - 'bcm27xx/bcm2711'
          - 'ipq40xx/generic'
          - 'ipq806x/generic'
          - 'ipq807x/generic'
          - 'lantiq/xrx200'
          - 'mediatek/filogic'
          - 'mvebu/cortexa9'
          - 'ramips/mt7621'
          - 'rockchip/armv8'
          - 'sunxi/cortexa7'
          - 'x86/64'
          - 'qualcommax/ipq5018'
          - 'qualcommax/ipq6018'
          - 'qualcommax/ipq8074'
          - 'realtek/generic'
          - 'mediatek/mt7622'

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion libncurses5-dev gawk zlib1g-dev python3-dev python3-setuptools unzip wget libtool python3-pip
          pip3 install pyelftools

      - name: Clone OpenWrt source code
        run: git clone --depth 1 --branch ${{ matrix.openwrt_version }} https://github.com/openwrt/openwrt.git openwrt

      - name: Clone custom single packages
        run: |
          git clone --depth 1 https://github.com/peditx/luci-app-themeswitch.git openwrt/package/luci-app-themeswitch
          git clone --depth 1 https://github.com/peditx/luci-theme-peditx.git openwrt/package/luci-theme-peditx
          git clone --depth 1 https://github.com/peditx/luci-theme-carbonpx.git openwrt/package/luci-theme-carbonpx

      - name: Update feeds and generate config
        run: |
          cd openwrt
          
          # Append custom feeds to the existing feeds.conf.default
          # This is more robust than creating a new file from scratch.
          echo "Appending custom feeds..."
          cat >> feeds.conf.default << EOF
          src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages
          src-git passwall_peditx https://github.com/peditx/openwrt-passwall
          src-git passwall2_peditx https://github.com/peditx/openwrt-passwall2
          EOF
          
          echo "Updating and installing all feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          echo "Generating build configuration..."
          TARGET_MAIN="${{ matrix.target_subtarget }}"
          TARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f1)
          SUBTARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f2)
          
          cat > .config << EOF
          CONFIG_TARGET_${TARGET}=y
          CONFIG_TARGET_${TARGET}_${SUBTARGET}=y
          CONFIG_ALL_MODULES=y
          CONFIG_SIGNED_PACKAGES=y
          CONFIG_PACKAGE_luci=y
          EOF
          
          # This generates the final .config based on the selections above
          make defconfig
          make oldconfig

      - name: Cache OpenWrt Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-${{ matrix.openwrt_version }}-dl-${{ hashFiles('openwrt/feeds.conf.default') }}

      - name: Decode usign private key
        run: |
          echo "${{ secrets.USIGN_PRIVATE_KEY }}" | base64 -d > openwrt/signing_key.pem
          echo "CONFIG_SIGNATURE_KEY=\"signing_key.pem\"" >> openwrt/.config

      - name: Download all package sources
        run: |
          cd openwrt
          make download -j$(nproc) V=s

      - name: Cache Host Tools
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir/host
          key: ${{ runner.os }}-${{ matrix.openwrt_version }}-host-${{ hashFiles('openwrt/.config') }}

      - name: Build prerequisites (tools and toolchain)
        run: |
          cd openwrt
          make tools/install -j$(nproc) V=s
          make toolchain/install -j$(nproc) V=s

      - name: Build all packages (non-stop)
        run: |
          cd openwrt
          # Use IGNORE_ERRORS=m to skip broken packages and continue the build process.
          # This is crucial for building a complete repository without being stopped by a single failure.
          make package/compile -j$(nproc) V=s IGNORE_ERRORS=m
          # Index all the packages that were successfully built.
          make package/index V=s

      - name: Organize packages for artifact upload
        run: |
          echo "Organizing built packages..."
          TARGET_MAIN="${{ matrix.target_subtarget }}"
          TARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f1)
          SUBTARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f2)
          
          ARTIFACT_DIR="dist/${{ matrix.openwrt_version }}/${TARGET}/${SUBTARGET}"
          mkdir -p "${ARTIFACT_DIR}/packages"
          
          find openwrt/bin/packages -type f -name "*.ipk" -exec cp {} "${ARTIFACT_DIR}/packages/" \;
          find openwrt/bin/targets -name "Packages*" -exec cp {} "${ARTIFACT_DIR}/" \;
          
          if [ -f "openwrt/key-build.pub" ]; then
            cp openwrt/key-build.pub "dist/${{ matrix.openwrt_version }}/"
          fi
          
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist
          
  deploy:
    needs: [build]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./dist
      
      - name: Create repository index pages
        run: |
          cd dist
          echo "Creating root index page..."
          # ... (rest of the index creation script is standard and correct)
          echo '<!DOCTYPE html><html><head><title>PeDitXOS Repository</title><style>body{font-family: sans-serif; padding: 2em;}</style></head><body>' > index.html
          echo '<h1>PeDitXOS Repository</h1>' >> index.html
          echo '<h2>Available OpenWrt Versions:</h2><ul>' >> index.html
          for dir in $(find . -maxdepth 1 -type d -not -name '.*' -not -name '.' | sort); do
            version_name=$(basename "$dir")
            echo "<li><a href=\"$version_name/\">$version_name</a></li>" >> index.html
          done
          echo '</ul>' >> index.html
          find . -name 'key-build.pub' -print -exec cp {} ./key-build.pub \; -quit
          if [ -f "./key-build.pub" ]; then
            echo '<h3>Public Signing Key: <a href="key-build.pub">key-build.pub</a></h3>' >> index.html
          fi
          echo '</body></html>'
          
      - name: Push updates to repository
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.DEPLOY_KEY }}
          external_repository: peditx/PeDitXOS-Repository
          publish_dir: ./dist
          publish_branch: repo
          force_orphan: true
          cname: downloads.peditxos.ir

      - name: Final Check
        run: echo "Deployment to 'peditx/PeDitXOS-Repository' branch 'repo' complete."

