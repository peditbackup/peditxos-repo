# ======================================================================================
# COMPLETE OpenWrt Package Repository Builder - DYNAMIC HYBRID SERVERLESS Version
#
# This workflow combines the best of both worlds:
#   - Dynamically discovers all available build targets for each OpenWrt version.
#   - Builds from the full OpenWrt source for maximum compatibility.
#   - Reads external package versions from a central 'cur_ver.json' file.
#   - Deploys the final repository to a separate GitHub repository (serverless).
# ======================================================================================

name: Build and Deploy Hybrid OpenWrt Packages (Serverless)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at 00:00 UTC
  push:
    paths:
      - 'cur_ver.json'

jobs:
  # Job 1: Dynamically generate the build matrix based on the OpenWrt source for each version
  generate_matrix:
    name: Generate Build Matrix for ${{ matrix.ref }}
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.out.outputs.targets }}
    strategy:
      fail-fast: false
      matrix:
        ref:
          - 'main'
          - 'openwrt-24.10'
          - 'openwrt-23.05'
          - 'openwrt-22.03'
    steps:
      - name: Checkout OpenWrt source to find targets
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ matrix.ref }}

      - name: Set target/subtarget list
        id: find_targets
        run: |
          REF=${{ matrix.ref }}
          JSON='['
          FIRST=1
          # Use the 'targets' option to get "target/subtarget" pairs like "ath79/generic"
          while read -r line; do
            # Skip empty lines
            [ -z "$line" ] && continue
            
            TARGET_PAIR=$(echo "$line" | sed 's/"/\\"/g')
            
            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            FIRST=0
            
            JSON="$JSON"'{"target_subtarget":"'"$TARGET_PAIR"'","openwrt_version":"'"$REF"'"}'
          done <<< $(perl ./scripts/dump-target-info.pl targets 2>/dev/null)
          
          JSON="$JSON"']'
          echo "Generated Matrix for ${{ matrix.ref }}: $JSON"
          echo "targets=$JSON" >> "$GITHUB_OUTPUT"

      - name: Store matrix output
        uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.ref }}
          outputs: |-
            targets: ${{ steps.find_targets.outputs.targets }}

  # Job 2: Gather all generated matrices into a single, combined matrix
  gather_matrix:
    name: Gather All Build Matrices
    runs-on: ubuntu-latest
    needs: generate_matrix
    outputs:
      result: ${{ steps.gather.outputs.result }}
    steps:
      - name: Read all matrix outputs
        uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: generate_matrix
          
      - name: Combine matrices
        id: gather
        run: |
          result=$(jq -c '.targets[]' <<< '${{ steps.read.outputs.result }}' | jq -c -s add)
          echo "Final Combined Matrix: $result"
          echo "result=${result}" >> $GITHUB_OUTPUT

  # Job 3: The main build job, using the dynamically generated matrix
  build:
    name: Build ${{ matrix.target_subtarget }} for ${{ matrix.openwrt_version }}
    runs-on: ubuntu-latest
    needs: gather_matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.gather_matrix.outputs.result) }}
    steps:
      - name: Checkout main repository code (for config files)
        uses: actions/checkout@v4

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion libncurses5-dev gawk zlib1g-dev python3-dev python3-setuptools unzip wget libtool python3-pip jq

      - name: Read Package Versions from File
        id: ver
        run: |
          echo "Reading package versions from cur_ver.json..."
          jq -r 'keys[] as $k | "\($k)=\(.[$k].version)"' cur_ver.json >> $GITHUB_OUTPUT

      - name: Clone OpenWrt source code
        run: git clone --depth 1 --branch ${{ matrix.openwrt_version }} https://github.com/openwrt/openwrt.git openwrt

      - name: Clone custom single packages
        run: |
          git clone --depth 1 https://github.com/peditx/luci-app-themeswitch.git openwrt/package/luci-app-themeswitch
          git clone --depth 1 https://github.com/peditx/luci-theme-peditx.git openwrt/package/luci-theme-peditx
          git clone --depth 1 https://github.com/peditx/luci-theme-carbonpx.git openwrt/package/luci-theme-carbonpx

      - name: Update feeds and generate config
        working-directory: ./openwrt
        run: |
          echo "Appending custom feeds with latest versions..."
          cat >> feeds.conf.default << EOF
          src-git-full passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages ${{ steps.ver.outputs.packages }}
          src-git-full passwall_luci https://github.com/peditx/openwrt-passwall ${{ steps.ver.outputs.passwall }}
          src-git-full passwall2 https://github.com/peditx/openwrt-passwall2 ${{ steps.ver.outputs.passwall2 }}
          EOF
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          echo "Generating build configuration for ${{ matrix.target_subtarget }}..."
          TARGET_MAIN="${{ matrix.target_subtarget }}"
          TARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f1)
          SUBTARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f2)
          
          cat > .config << EOF
          CONFIG_TARGET_${TARGET}=y
          CONFIG_TARGET_${TARGET}_${SUBTARGET}=y
          CONFIG_ALL_MODULES=y
          CONFIG_PACKAGE_luci=y
          CONFIG_SIGNED_PACKAGES=y
          EOF
          
          make defconfig

      - name: Cache OpenWrt Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-${{ matrix.openwrt_version }}-dl-${{ hashFiles('openwrt/feeds.conf.default', '**/Makefile') }}

      - name: Decode package signing key
        run: |
          echo "${{ secrets.USIGN_PRIVATE_KEY }}" | base64 -d > openwrt/signing_key.pem
          echo "CONFIG_SIGNATURE_KEY=\"signing_key.pem\"" >> openwrt/.config

      - name: Download all package sources
        working-directory: ./openwrt
        run: make download -j$(nproc) V=s

      - name: Build all packages (non-stop)
        working-directory: ./openwrt
        run: |
          make package/compile -j$(nproc) V=s IGNORE_ERRORS=m
          make package/index V=s

      - name: Organize packages for artifact upload
        run: |
          TARGET_MAIN="${{ matrix.target_subtarget }}"
          TARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f1)
          SUBTARGET=$(echo "$TARGET_MAIN" | cut -d'/' -f2)
          ARTIFACT_DIR="dist/${{ matrix.openwrt_version }}/${TARGET}/${SUBTARGET}"
          mkdir -p "${ARTIFACT_DIR}/packages"
          find openwrt/bin/packages -type f -name "*.ipk" -exec cp {} "${ARTIFACT_DIR}/packages/" \;
          find openwrt/bin/targets -path "*${TARGET}/${SUBTARGET}*" -name "Packages*" -exec cp {} "${ARTIFACT_DIR}/" \;
          if [ -f "openwrt/key-build.pub" ]; then
            cp openwrt/key-build.pub "dist/key-build-${{ matrix.openwrt_version }}.pub"
          fi
      
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.openwrt_version }}-${{ matrix.target_subtarget }}
          path: dist
          retention-days: 1

  # Job 4: The final deployment job
  deploy:
    needs: [build]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          pattern: packages-*
          merge-multiple: true
      
      - name: Create repository index pages
        run: |
          cd dist
          echo '<!DOCTYPE html><html><head><title>PeDitXOS Repository</title><style>body{font-family: sans-serif; padding: 2em;}</style></head><body>' > index.html
          echo '<h1>PeDitXOS Repository</h1>' >> index.html
          echo '<h2>Available OpenWrt Versions:</h2><ul>' >> index.html
          for dir in $(find . -maxdepth 1 -type d -not -name '.*' -not -name '.' | sort); do
            version_name=$(basename "$dir")
            echo "<li><a href=\"$version_name/\">$version_name</a></li>" >> index.html
          done
          echo '</ul>' >> index.html
          find . -name 'key-build-*.pub' -print -exec cp {} ./key-build.pub \; -quit
          if [ -f "./key-build.pub" ]; then
            echo '<h3>Public Signing Key: <a href="key-build.pub">key-build.pub</a></h3>' >> index.html
          fi
          echo '</body></html>'

      - name: Push updates to repository
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.DEPLOY_KEY }}
          external_repository: peditx/PeDitXOS-Repository
          publish_dir: ./dist
          publish_branch: repo
          force_orphan: true
          cname: downloads.peditxos.ir
